//
package gov.nist.p25.issi.issiconfig;

import gov.nist.p25.issi.constants.ISSIDtdConstants;
import gov.nist.p25.issi.constants.XMLTagsAndAttributes;
import gov.nist.p25.issi.p25body.serviceprofile.group.GroupServiceProfile;
import gov.nist.p25.issi.p25body.serviceprofile.user.UserServiceProfile;
import gov.nist.p25.issi.transctlmgr.ptt.TimerValues;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.Iterator;
import java.util.LinkedList;
import javax.xml.parsers.SAXParserFactory;

import org.apache.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * A parser for the topology configuration file.
 */
public class TopologyConfigParser extends DefaultHandler
   implements XMLTagsAndAttributes
{
   //private static Logger logger = Logger.getLogger("gov.nist.p25.issi.issiconfig");
   private static Logger logger = Logger.getLogger(TopologyConfigParser.class);

   private boolean inuserProfile;
   private boolean inGropProfile;
   private StringBuffer cdatabuffer;

   private String configFile;
   private GroupConfig currentGroupConfig;
   private GroupServiceProfile groupServiceProfile;
   private RfssConfig rfssConfig;
   private SuConfig currentSuConfig;
   private TopologyConfig topologyConfig;
   private TopologyConfig globalTopology;
   private UserServiceProfile userServiceProfile;
   private XMLReader saxParser;

   // Entity resolver -- allows you to work offline
   class MyResolver implements EntityResolver {

      public InputSource resolveEntity(String publicId, String systemId)
         throws SAXException, IOException
      {
         if (ISSIDtdConstants.URL_ISSI_DTD_TOPOLOGY_CONFIG.equals(systemId)) {
            FileReader fileReader = new FileReader(new File("dtd/topologyconfig.dtd"));
            InputSource inputSource = new InputSource(fileReader);
            return inputSource;
         } else {
            return null;
         }
      }
   }

   /**
    * Constructor. Takes a file name and constructs itself from that file.
    * 
    * @param fileName --
    *            xml file from which the topology config constructs itself.
    */
   public TopologyConfigParser() throws Exception
   {
      try {
         SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
         saxParser = saxParserFactory.newSAXParser().getXMLReader();
         saxParser.setEntityResolver(new MyResolver());
         saxParser.setContentHandler(this);
         saxParser.setFeature("http://xml.org/sax/features/validation", true);

      } catch (SAXParseException spe) {
         // Error generated by the parser
         logger.error("\n** Parsing error" + ", line " + spe.getLineNumber()
               + ", uri " + spe.getSystemId());
         logger.error("   " + spe.getMessage());

         // Use the contained exception, if any
         Exception x = spe;
         if (spe.getException() != null)
            x = spe.getException();
         x.printStackTrace();
         throw spe;
         
      } catch (SAXException sxe) {
         // Error generated by this application
         // (or a parser-initialization error)
         Exception x = sxe;
         if (sxe.getException() != null)
            x = sxe.getException();
         x.printStackTrace();
         throw sxe;

      } catch (Exception pce) {
         // Parser with specified options can't be built
         pce.printStackTrace();
         throw pce;
      }
   }

   // SAX Parsing methods that generate this structure from a XML File.
   public TopologyConfig parse(TopologyConfig globalTopology, String configFile)
      throws IOException, SAXException
   {
      this.globalTopology = globalTopology;
      topologyConfig = new TopologyConfig();
      topologyConfig.setTopologyFile( configFile);
      this.configFile = configFile;

      // Inherit the values from global topology.
      if (globalTopology != null) {
         topologyConfig.getWacnNameTable().putAll(globalTopology.getWacnNameTable());
         topologyConfig.getSystemNameTable().putAll(globalTopology.getSystemNameTable());
         topologyConfig.getSystemTable().putAll(globalTopology.getSystemTable());
         TimerValues.resetToDefaults();
      }
      saxParser.parse(configFile);
      return topologyConfig;
   }

   @Override
   public void characters(char[] ch, int start, int length)
   {
      if (inuserProfile) {
         cdatabuffer.append(ch, start, length);
      }
      else if (inGropProfile) {
         cdatabuffer.append(ch, start, length);
      }
   }

   @Override
   public void startElement(String namespaceURI, String local, String name,
      Attributes attrs) throws SAXException 
   {
      String param = null;
      try {
         if ("conformance-test-config".compareToIgnoreCase(name) == 0) {
            param = attrs.getValue("THEARTBEAT");
            if (param != null) {
               TimerValues.setHeartbeat(Integer.parseInt(param));
            }
            param = attrs.getValue("traceOrder");
            if (param != null) {
               String[] rfssOrder = param.split(",");
               LinkedList<String> orders = new LinkedList<String>();
               for ( String s : rfssOrder) {
                  orders.add(s.trim());
               }
               topologyConfig.setTraceOrder(orders);
            }

         } else if ("userprofile".compareToIgnoreCase(name) == 0) {

            inuserProfile = true;
            cdatabuffer = new StringBuffer();
            userServiceProfile = new UserServiceProfile();
            userServiceProfile.setAvailabilityCheck(attrs.getValue("availCheckSupported"));

            param = attrs.getValue("isFullDuplex");
            if( param != null) {
               userServiceProfile.setFullDuplex(Boolean.parseBoolean(param));
               userServiceProfile.setFullDuplexIsSet(true);
            }
            /** else {
	       // 12.25.x initialize to HALF duplex
               userServiceProfile.setFullDuplex(false);
            } **/

            userServiceProfile.setAccessPermission(attrs.getValue("accessPermission"));

            param = attrs.getValue("isSecureCapable");
            if(param != null) {
               userServiceProfile.setSecureCapable(Boolean.parseBoolean(param));
            }

            userServiceProfile.setGroupCallPermission(attrs.getValue("groupCallPermission"));
            userServiceProfile.setUnitToUnitCallPermission(attrs.getValue("unitToUnitCallPermission"));

            // userprofile: radioInhibit="RadioInhibited" or "NotRadioInhibited"
            userServiceProfile.setRadioInhibit(attrs.getValue("radioInhibit"));

            param = attrs.getValue("unitToUnitCallPriority");
            if(param != null ) {
               userServiceProfile.setCallPriority(Integer.parseInt(param));
            }
            userServiceProfile.setUnitToUnitCallSetupPreference(attrs.getValue("unitToUnitCallSetupPreference"));

            param = attrs.getValue("interconnectCallPriority");
            if (param != null) {
               userServiceProfile.setInterconnectCallPriority(Integer.parseInt(param));
            }

         } else if ("groupprofile".compareToIgnoreCase(name) == 0) {

            inGropProfile = true;
            cdatabuffer = new StringBuffer();
            groupServiceProfile = new GroupServiceProfile();
            groupServiceProfile.setAccessPermission(attrs.getValue("accessPermission"));
            
            param = attrs.getValue("announcementGroup");
            if (param != null ) {
               groupServiceProfile.setAnnouncementGroupId(Long.parseLong(param));
            }

            param = attrs.getValue("groupPriority");
            if (param != null ) {
               groupServiceProfile.setGroupPriority(Integer.parseInt(param));
            }
            
            param = attrs.getValue("rfHangTime");
            if (param != null) {
               groupServiceProfile.setRfHangTime(Integer.parseInt(param));
            }
            
            param = attrs.getValue("confirmedGroupCallSetupTime");
            if (param != null ) {
               groupServiceProfile.setConfirmedGroupCallSetupTime(Integer.parseInt(param));
            }
            groupServiceProfile.setInterruptMode(attrs.getValue("interruptMode"));
            groupServiceProfile.setGroupSecurityLevel(attrs.getValue("groupSecurityLevel"));

            param = attrs.getValue("interconnectFlag");
            if (param != null ) {
               groupServiceProfile.setInterconnectFlag(Boolean.parseBoolean(param));
            }
            groupServiceProfile.setInterconnectSecurity(attrs.getValue("interconnectSecurity"));

         } else if ("rfssconfig".compareToIgnoreCase(name) == 0) {

            String rfssName = attrs.getValue(RFSS_NAME);
            if (rfssName == null) {
               throw new SAXException("Missing a required attribute " + RFSS_NAME);
            }

            if( globalTopology != null) {
               rfssConfig = globalTopology.getRfssConfigByName(rfssName);
               if (rfssConfig == null) {
                  throw new SAXException("Could not find global reference " + rfssName);
               }
               topologyConfig.addRfssConfig(rfssConfig);
            }

            param = attrs.getValue(GROUP_REGISTRATION_EXPIRES_TIME);
            int groupRegistrationExpiresTime = (param == null || UNBOUNDED.equals(param)) ? -1 :
                Integer.parseInt(param);
            if (groupRegistrationExpiresTime < -1) {
               throw new SAXException( "Illegal value specified for groupRegistrationExpiresTime ");
            }

            param = attrs.getValue(SERVED_GROUP_LEASE_TIME);
            int servedGroupLeaseTime = (param == null || UNBOUNDED.equals(param)) ? -1 : 
                Integer.parseInt(param);

            param = attrs.getValue(GROUP_CALL_INVITE_PROCESSING_TIME);
            int groupCallInviteProcessingTime = (param == null ? 0 : Integer.parseInt(param));

            param = attrs.getValue(RF_RESOURCES_AVAILABLE);
            boolean rfResavail = (param == null ? true : "true".equals(param));

            param = attrs.getValue(MAX_RTP_PORTS);
            int maxRtpPorts = (param == null || UNBOUNDED.equals(param)) ? -1 :
                  Integer.parseInt(param);

            param = attrs.getValue(IS_ADVANCED_RTP_RESOURCE_MANAGEMENT_SUPPORTED);
            boolean isAdvancedRtpResourceManagementSupported = 
               (param == null ? false : "true".equals(param));

            param = attrs.getValue(QUERY_SU_CREDENTIALS);
            boolean queryUnknownSu = (param == null ? false : "true".equals(param));

            param = attrs.getValue(QUERY_GROUP_CREDENTIALS);
            boolean queryUnknownGroup = (param == null ? false : "true".equals(param));

            param = attrs.getValue(REGISTER_CONFIRM_TIME);
            int registerConfirmTime = (param == null ? 0 : Integer.parseInt(param));

            param = attrs.getValue(GRANT_PTT_REQUEST);
            boolean grantPttRequest = (param == null ? true : "true".equals(param));

            param = attrs.getValue(IS_INTERESTED_IN_LOSING_AUDIO);
            boolean isInterestedInLosingAudio = (param == null ? false : "true".equals(param));

            param = attrs.getValue(IS_CALLING_SU_INITRANS);
            boolean isCallingSuInitialTransmitter = (param == null ? true : "true".equals(param));
            
            //rfssConfig = topologyConfig.getRfssConfigByName(rfssName);
            rfssConfig.setNotInterestedInLosingAudio( !isInterestedInLosingAudio);
            rfssConfig.setGroupRegistrationExpiresTime(groupRegistrationExpiresTime);
            rfssConfig.setServedGroupLeaseTime(servedGroupLeaseTime);
            rfssConfig.setGroupCallInviteProcessingTime(groupCallInviteProcessingTime);
            rfssConfig.setRegisterConfirmTime(registerConfirmTime);
            rfssConfig.setMaxRtpPorts(maxRtpPorts);
            rfssConfig.setRfResourcesAvailable(rfResavail);
            rfssConfig.setSuCredentialsQueriedBeforeRegister(queryUnknownSu);
            rfssConfig.setGroupCredentialsQueriedBeforeRegister(queryUnknownGroup);
            rfssConfig.setAdvancedRtpResourceManagementSupported(isAdvancedRtpResourceManagementSupported);
            rfssConfig.setPttRequestGranted( grantPttRequest);
            rfssConfig.setCallingSuInitialTransmitter(isCallingSuInitialTransmitter);
         
            String id = attrs.getValue(ID);
            if (id != null) {
               topologyConfig.addRfssAlias(id,rfssConfig);
            }

         } else if ("suconfig".compareToIgnoreCase(name) == 0) {

            String suName = attrs.getValue(SU_NAME);
            if (suName == null) {
               throw new SAXException("Missing a required attribute " + SU_NAME);
            }

            SuConfig suConfig = null;
            suConfig = globalTopology.getSuConfigByName(suName);
            if (suConfig == null) {
               throw new SAXException("Could not find a global su name " + suName);
            }
            RfssConfig homeRfss = suConfig.getHomeRfss();
            
            topologyConfig.addRfssConfig(homeRfss);
            RfssConfig servingRfss = suConfig.getInitialServingRfss();
            topologyConfig.addRfssConfig(servingRfss);
            topologyConfig.getSuNameTable().put(suConfig.getSuName(), suConfig);
            topologyConfig.getSuConfigTable().put(suConfig.getRadicalName(), suConfig);

            SuState initialSuState = SuState.OFF;
            param = attrs.getValue(INITIAL_STATE);
            if (param != null) {
               initialSuState = "on".equals(param) ? SuState.ON : SuState.OFF;
            }

            param = attrs.getValue(HOME_RFSS_KNOWS_ABOUT_ME_FOR);
            int homeRfssKnowsMeFor = (param == null || UNBOUNDED.equals(param)) ? -1 :
                Integer.parseInt(param);

            param = attrs.getValue(INVITE_PROCESSING_DELAY);
            int inviteProcessingDelay = (param == null ? 0 : Integer.parseInt(param));

            param = attrs.getValue(HOME_RFSS_REGISTERS_ME_FOR);
            int homeRfssRegistersMeFor = (param == null || UNBOUNDED.equals(param)) ? -1 :
                Integer.parseInt(param);

            param = attrs.getValue(REGISTER_ON_FORCE);
            boolean registerOnForce = (param == null ? true : Boolean.parseBoolean(param));

            param = attrs.getValue(SERVING_RFSS_REFERENCES_ME_FOR);
            int servingRfssReferencesMeFor = (param == null || UNBOUNDED.equals(param)) ? -1 :
                Integer.parseInt(param);

            param = attrs.getValue(AVAILABILITY);
            boolean availability = (param == null ? true : Boolean.parseBoolean(param));
            
            /* not used ?
            param = attrs.getValue(IS_SU_TO_SU_CALL_ALLOWED);
            boolean isSuToSuCallAllowed = (param == null ? true : Boolean.parseBoolean(param));
             */
            
            String prot = attrs.getValue(PROTECTION_DISPOSITION);
            CProtectedDisposition disp = CProtectedDisposition.getValue(prot);
            suConfig = topologyConfig.getSuNameTable().get(suName);
            suConfig.setInitialSuState(initialSuState);
            suConfig.setHomeRfssKnowsAboutMeFor(homeRfssKnowsMeFor);
            suConfig.setServingRfssReferencesMeFor(servingRfssReferencesMeFor);
            suConfig.setInviteProcessingDelay(inviteProcessingDelay);
            suConfig.setHomeRfssRegistersMeFor(homeRfssRegistersMeFor);
            suConfig.setRegisterOnForce(registerOnForce);
            suConfig.setAvailable(availability);
            suConfig.setCProtectedDisposition(disp);

            // Table 25 - r-presence default to not confirmed
            boolean checkSuPresenceOnRegister = false;
            String rpresence = attrs.getValue(CHECK_SU_PRESENCE_ON_REGISTER);
            if(rpresence != null) {
               checkSuPresenceOnRegister = "true".equals(rpresence);
            }
            suConfig.setCheckSuPresenceOnRegister(checkSuPresenceOnRegister);

            // mostly to support radioInhibit
            boolean checkCallPermission = true;
            String callPerm = attrs.getValue("checkCallPermission");
            if(callPerm != null) {
               checkCallPermission = "true".equals(callPerm);
            }
            suConfig.setCheckCallPermission(checkCallPermission);

	    // #407 to support 12.14.x
            param = attrs.getValue("skipRegisterRegister");
            suConfig.setSkipRegisterRegister(param == null ? false : "true".equals(param));

            RfssConfig homeRfssConfig = suConfig.getHomeRfss();
            RfssConfig servingRfssConfig = suConfig.getInitialServingRfss();
            homeRfssConfig.addAssignedSubscriberUnit(suConfig);

            servingRfssConfig.addServedSubscriberUnit(suConfig);
            currentSuConfig = suConfig;

            param = attrs.getValue(ID);
            if (param != null) {
               topologyConfig.getSuNameTable().put(param, suConfig);
            }

         } else if ("forbidden".equalsIgnoreCase(name)) {

            String rfssName = attrs.getValue(RFSS_NAME);
            if (rfssName == null) {
               throw new SAXException("Missing a required value " + RFSS_NAME);
            }

            RfssConfig rfssConfig = globalTopology.getRfssConfigByName(rfssName);
            if (rfssConfig == null) {
               throw new SAXException("Could not find global rfss: " + attrs.getValue(RFSS_NAME));
            }
            
            topologyConfig.addRfssConfig(rfssConfig);
            String operation = attrs.getValue(OPERATION);
            if (currentSuConfig != null)
	    {
               if ("REGISTER".equals(operation))
                  currentSuConfig.addRegisterForbiddenRfss(rfssConfig);
               else if ("REGISTER-QUERY".equals(operation))
                  currentSuConfig.addRegisterQueryForbiddenRfss(rfssConfig);
               else
                  currentSuConfig.addForbiddenRfss(rfssConfig);
            }
	    else if (currentGroupConfig != null)
	    {
               if (currentGroupConfig.getHomeRfss() == rfssConfig) {
                  throw new SAXException( "Home RFSS of the group cannot be on the Forbidden set");
	       } else {
                  for (Iterator<SuConfig> subscribers = currentGroupConfig.getSubscribers();
                       subscribers.hasNext(); )
		  {
                     SuConfig subscriber = subscribers.next();
                     if (subscriber.getInitialServingRfss() == rfssConfig
                           && subscriber.getInitialSuState() == SuState.ON)
                        throw new SAXException( "Configuration error: "
                           + " Group Member Initial Serving RFSS cannot be in the forbidden set");
                  }
               }
               if ("REGISTER".equals(operation))
                  currentGroupConfig.addForbiddenRfss(rfssConfig);
               else if ("REGISTER-QUERY".equals(operation))
                  currentGroupConfig.addRegisterQueryForbiddenFromRfss(rfssConfig);
               else
                  currentGroupConfig.addForbiddenRfss(rfssConfig);
            } else {
               throw new SAXException("Unexpected element : forbidden ");
            }

         } else if ("unknown-unit".compareToIgnoreCase(name) == 0) {

            String suName = attrs.getValue(SU_NAME);
            if (suName == null) {
               throw new SAXException("Missing a required value " + SU_NAME);
            }
            SuConfig suConfig = globalTopology.getSuConfigByName(suName);
            rfssConfig.addUnknownSu(suConfig);

         } else if ("sgconfig".compareToIgnoreCase(name) == 0) {
            String groupName = attrs.getValue(GROUP_NAME);
            if (groupName == null) {
               throw new SAXException("Missing a required attribute " + GROUP_NAME);
            }
            GroupConfig groupConfig = null;
            groupConfig = globalTopology.getGroupConfigByName(groupName);
            if (groupConfig == null) {
               throw new SAXException( "Could not find a global group name " + groupName);
            }
            RfssConfig homeRfss = groupConfig.getHomeRfss();
            
            topologyConfig.addRfssConfig(homeRfss);
            topologyConfig.getGroupNameTable().put(groupName, groupConfig);
            topologyConfig.getGroupTable().put(groupConfig.getRadicalName(), groupConfig);

            int homeRfssKnowsMeFor = attrs.getValue(HOME_RFSS_KNOWS_ABOUT_ME_FOR) == null
                  || attrs.getValue(HOME_RFSS_KNOWS_ABOUT_ME_FOR).equals(
                        UNBOUNDED) ? -1 : Integer.parseInt(attrs
                  .getValue(HOME_RFSS_KNOWS_ABOUT_ME_FOR));
            groupConfig.setHomeRfssKnowsAboutMeFor(homeRfssKnowsMeFor);
            
            String protectionDisposition = attrs.getValue(PROTECTION_DISPOSITION);
            CProtectedDisposition pdisp = CProtectedDisposition.getValue(protectionDisposition);
            groupConfig.setCProtectedDisposition(pdisp);

            this.currentGroupConfig = groupConfig;
            topologyConfig.getGroupNameTable().put(groupName, groupConfig);
            RfssConfig homeRfssConfig = groupConfig.getHomeRfss();
            homeRfssConfig.addAssignedGroup(groupConfig);
            String refId = attrs.getValue(ID);
            if (refId != null) {
               topologyConfig.getGroupNameTable().put(refId, groupConfig);
            }

         } else if ("subscriber".compareToIgnoreCase(name) == 0) {

            String suName = attrs.getValue(SU_NAME);
            if (suName == null) {
               throw new SAXException("Missing a required attribute " + SU_NAME);
            }
            SuConfig suConfig = null;
            if (globalTopology.getSuConfigByName(suName) == null) {
               throw new SAXException( "Could not find global defintion for su " + suName);
            }
            suConfig = globalTopology.getSuConfigByName(suName);
            RfssConfig homeRfss = suConfig.getHomeRfss();
            topologyConfig.addRfssConfig(homeRfss);
            
            RfssConfig servingRfss = suConfig.getInitialServingRfss();
            topologyConfig.addRfssConfig(servingRfss);
            topologyConfig.getSuNameTable().put(suConfig.getSuName(), suConfig);
            topologyConfig.getSuConfigTable().put(suConfig.getRadicalName(), suConfig);
            homeRfss.addAssignedSubscriberUnit(suConfig);

            servingRfss.addServedSubscriberUnit(suConfig);
            if (suConfig == null) {
               throw new SAXException("Could not find an rfss for " + suName);
	    } else {
               currentGroupConfig.addSubscriber(suConfig);
               suConfig.addGroup(currentGroupConfig);
               suConfig.addSubscribedTo(currentGroupConfig);
            }
         }
      } catch (SAXException ex1) {
         throw ex1;
      } catch (Exception ex) {
         logger.error("Error parsing configuration file " + configFile, ex);
         throw new SAXException("Error parsing config file", ex);
      }
   }

   @Override
   public void endElement(String uri, String name, String qName)
      throws SAXException
   {
      if ("userprofile".equalsIgnoreCase(qName)) {
         inuserProfile = false;
         String cdataBuf = cdatabuffer.toString();
         int len = cdataBuf.trim().length();
         //logger.debug("cdataBuffer.len=" + len);
         try {
            if (len != 0) {
               currentSuConfig.setUserServiceProfile(cdataBuf);
            } else {
               currentSuConfig.setUserServiceProfile(userServiceProfile);
            }
         } catch (ParseException ex) {
            logger.error("error user profile in file " + configFile, ex);
            throw new SAXException(cdataBuf, ex);
         }
      } 
      else if ("groupprofile".equalsIgnoreCase(qName)) {
         inGropProfile = false;
         String cdataBuf = cdatabuffer.toString();
         int len = cdataBuf.trim().length();
         try {
            if (len != 0) {
               currentGroupConfig.setGroupServiceProfile(cdataBuf);
            } else {
               currentGroupConfig.setGroupServiceProfie(groupServiceProfile);
            }
         } catch (ParseException ex) {
            logger.error("error user profile in file " + configFile, ex);
            throw new SAXException(cdataBuf, ex);
         }
      } else if ("suconfig".equalsIgnoreCase(qName)) {
         currentSuConfig = null;
      } else if ("sgconfig".equalsIgnoreCase(qName)) {
         currentGroupConfig = null;
      }
   }
}

//
package gov.nist.p25.issi.issiconfig;

import gov.nist.p25.issi.constants.ISSIDtdConstants;
import gov.nist.p25.issi.constants.XMLTagsAndAttributes;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.xml.parsers.SAXParserFactory;

import org.apache.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * A parser for the global topology file.
 */
public class GlobalTopologyParser extends DefaultHandler
   implements XMLTagsAndAttributes
{
   private static Logger logger = Logger.getLogger(GlobalTopologyParser.class);
   //public static void showln(String s) { System.out.println(s); }
   
   private static boolean verbose = false;

   /**
    * The following are used for parsing this structure.
    */
   private boolean inuserProfile;
   private StringBuffer cdatabuffer;
   private SuConfig currentSuConfig;
   private boolean inGropProfile;

   /**
    * File name from which this structure is generated.
    */
   private String configFile;
   private GroupConfig currentGroupConfig;
   private TopologyConfig topologyConfig;
   private XMLReader saxParser;
   private boolean interactive;
      
   // accessor
   public GroupConfig getCurrentGroupConfig() {
      return currentGroupConfig;      
   }
   public void setCurrentGroupConfig(GroupConfig groupConfig) {
      this.currentGroupConfig = groupConfig;
   }
   
   public SuConfig getCurrentSuConfig() {
      return currentSuConfig;
   }
   public void setCurrentSuConfig(SuConfig suConfig) {
      this.currentSuConfig = suConfig;
   }

   // Entity resolver -- allows you to work offline
   class MyResolver implements EntityResolver {
      public InputSource resolveEntity(String publicId, String systemId)
            throws SAXException, IOException {
         if ( ISSIDtdConstants.URL_ISSI_DTD_GLOBAL_TOPOLOGY.equals(systemId)) {
            FileReader fileReader = new FileReader(new File("dtd/globaltopology.dtd"));
            InputSource inputSource = new InputSource(fileReader);
            return inputSource;
         } else {
            return null;
         }
      }
   }

   // constructor
   public GlobalTopologyParser(boolean interactive)
      throws Exception {
      try {
         this.interactive = interactive;
         SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
         saxParser = saxParserFactory.newSAXParser().getXMLReader();
         saxParser.setEntityResolver(new MyResolver());
         
         saxParser.setContentHandler(this);
         saxParser.setFeature("http://xml.org/sax/features/validation", true);
         if(verbose)
         logger.debug("interactive="+interactive);

      } catch (SAXParseException spe) {
         // Error generated by the parser
         logger.error("\n** Parsing error" + ", line "
               + spe.getLineNumber() + ", uri " + spe.getSystemId());
         logger.error("   " + spe.getMessage());
         // Use the contained exception, if any
         Exception x = spe;
         if (spe.getException() != null)
            x = spe.getException();
         x.printStackTrace();
         throw spe;
         
      } catch (SAXException sxe) {
         // Error generated by this application
         // (or a parser-initialization error)
         Exception x = sxe;
         if (sxe.getException() != null)
            x = sxe.getException();
         x.printStackTrace();
         throw sxe;

      } catch (Exception pce) {
         // Parser with specified options can't be built
         pce.printStackTrace();
         throw pce;
      }
   }

   // SAX Parsing methods that generate this structure from a XML File.
   public TopologyConfig parse(TopologyConfig systemTopology, String configFile)
      throws IOException, SAXException 
   {
      this.topologyConfig = systemTopology;
      topologyConfig.setTopologyFile( configFile);
      this.configFile = configFile;

      logger.debug("Parsing " + configFile);
      saxParser.parse(new File(configFile).toURI().toURL().toString());
      
      if(verbose)
         logger.debug("interactive=" + interactive);
      if ( !interactive) {
         for (RfssConfig rfssConfig: systemTopology.getRfssConfigurations()) {
            //logger.debug("GlobalTopologyParser(1b): parse() get-ip="+rfssConfig.getIpAddress());
            rfssConfig.setIpAddress( LOOPBACK_ADDRESS);
            //logger.debug("GlobalTopologyParser(1b): parse() set-ip="+rfssConfig.getIpAddress());
         }
      }
      return topologyConfig;
   }

   @Override
   public void characters(char[] ch, int start, int length) {
      if (inuserProfile) {
         cdatabuffer.append(ch, start, length);
      } else if (inGropProfile) {
         cdatabuffer.append(ch, start, length);
      }
   }

   @Override
   public void startElement(String namespaceURI, String local, String name,
         Attributes attrs) throws SAXException {
      try {
         if (GLOBAL_TOPOLOGY_CONFIG.equalsIgnoreCase(name)) {
            // nothing to do            

         } else if (RFSSCONFIG.equalsIgnoreCase(name)) {

            String rfssName = attrs.getValue(RFSS_NAME);
            if (rfssName == null) {
               throw new SAXException("Missing a required attribute " + RFSS_NAME);
            }
            //if(verbose)
            //logger.debug("startElement(): rfssName="+rfssName);
            RfssConfig rfssConfig = topologyConfig.getRfssConfigByName(rfssName);
            if (rfssConfig == null) {
               //throw new Exception("Cannot find RfssConfig for " + rfssName);
               logger.debug("SKIP-Cannot find RfssConfig for " + rfssName);
               return;
            }

            String selfTestPortString = attrs.getValue(SELFTEST_PORT);
            if ( selfTestPortString == null) {
               throw new Exception("Missing a required attribute " + SELFTEST_PORT);
            }
            int selfTestPort = Integer.parseInt(selfTestPortString);
            rfssConfig.setSelfTestPort( selfTestPort);            
            //logger.debug("GlobalTopologyParser(2): startElement(): selfTestPort="+selfTestPort);

            if ( !interactive )  {
               //logger.debug("GlobalTopologyParser(2): startElement(): get-ip="+rfssConfig.getIpAddress());
               rfssConfig.setIpAddress( LOOPBACK_ADDRESS);
               //logger.debug("GlobalTopologyParser(2): startElement(): set-ip="+rfssConfig.getIpAddress());
               rfssConfig.setSipPort( selfTestPort);
            }            
            //showln("GlobalTopologyParser(2): startElement(): DONE ...");
            
         } else if ("suconfig".equalsIgnoreCase(name)) {

            String suName = attrs.getValue(SU_NAME);
            if (suName == null)
               throw new SAXException("Missing a required attribute " + SU_NAME);

            String id = attrs.getValue(SU_ID);
            if (id == null)
               throw new SAXException("Missing a required attribute " + SU_ID);
            int suId = Integer.parseInt(id, 16);

            String homeRfss = attrs.getValue(HOME_RFSS_NAME);
            RfssConfig homeRfssConfig = topologyConfig.getRfssConfigByName(homeRfss);
            if (homeRfssConfig == null) {
               //throw new SAXException( "Missing configuration for home RFSS "+homeRfss);
               logger.debug( "SKIP-Missing configuration for home RFSS "+homeRfss);
               return;
            }

            String servingRfss = attrs.getValue(SERVING_RFSS_NAME);
            RfssConfig servingRfssConfig = topologyConfig.getRfssConfigByName(servingRfss);
            if (servingRfssConfig == null) {
               //throw new SAXException( "Missing configuration for serving RFSS " + servingRfss);
               logger.debug( "SKIP-Missing configuration for serving RFSS " + servingRfss);
               return;
            }

            SuState initialSuState = SuState.OFF;            
            int homeRfssKnowsMeFor = -1;
            int inviteProcessingDelay = 0;
            int homeRfssRegistersMeFor = -1;
            boolean registerOnForce = true; 
            int servingRfssReferencesMeFor =  -1; 
            boolean isEmulated = servingRfssConfig.isEmulated() || !this.interactive ? true : false;            
            boolean availability = true;
            SuConfig suConfig = new SuConfig(suId, suName,
                  topologyConfig, homeRfssConfig, servingRfssConfig,
                  initialSuState, homeRfssKnowsMeFor,
                  servingRfssReferencesMeFor, inviteProcessingDelay,
                  homeRfssRegistersMeFor, registerOnForce, 
                  isEmulated, availability);

            setCurrentSuConfig(suConfig);
            String radicalName = suConfig.getRadicalName();
            if (topologyConfig.getSuConfigTable().containsKey(radicalName)) {
               throw new SAXException("Duplicate SU" + radicalName);
            }
            if(verbose)
            logger.debug("Putting " + suConfig.getRadicalName() + " into suConfig table");

            if (topologyConfig.getSuConfigTable().containsKey(suConfig.getRadicalName())) {
               throw new SAXException("Duplicate SU detected. Check " 
                     +configFile +" SU Name: " +suName);
            }
            topologyConfig.getSuConfigTable().put(suConfig.getRadicalName(), suConfig);
            topologyConfig.getSuNameTable().put(suName, suConfig);
      
         } else if ("sgconfig".equalsIgnoreCase(name)) {

            String groupName = attrs.getValue(GROUP_NAME);
            if (groupName == null)
               throw new SAXException("Missing a required attribute " + GROUP_NAME);

            String id = attrs.getValue(GROUP_ID);
            if (id == null)
               throw new SAXException("Missing a required attribute " + GROUP_ID);
            int sgid = Integer.parseInt(id, 16);

            String homeRfss = attrs.getValue(HOME_RFSS_NAME);
            if (homeRfss == null)
               throw new SAXException("Missing a required attribute " + HOME_RFSS_NAME);

            RfssConfig homeRfssConfig = topologyConfig.getRfssConfigByName(homeRfss);
            if (homeRfssConfig == null) {
               //throw new SAXException( "Missing configuration for home RFSS " + homeRfss);
               logger.debug( "SKIP-Missing configuration for home RFSS " + homeRfss);
               return;
            }

            int homeRfssKnowsMeFor = attrs .getValue(HOME_RFSS_KNOWS_ABOUT_ME_FOR) == null
                  || attrs.getValue(HOME_RFSS_KNOWS_ABOUT_ME_FOR).equals(
                        UNBOUNDED) ? -1 : Integer.parseInt(attrs
                  .getValue(HOME_RFSS_KNOWS_ABOUT_ME_FOR));
            GroupConfig groupConfig = new GroupConfig(groupName, sgid,
                  homeRfssConfig, homeRfssKnowsMeFor);

            String radicalName = groupConfig.getRadicalName();
            if(verbose)
            logger.debug("Adding group to table : name = " + radicalName);

            if (topologyConfig.getGroupTable().containsKey(radicalName)) {
               throw new SAXException("Duplicate group detected in "
                     +configFile +" Check Group with name " +groupName);
            }
            topologyConfig.getGroupTable().put(radicalName, groupConfig);
            this.currentGroupConfig = groupConfig;
            topologyConfig.getGroupNameTable().put(groupName, groupConfig);

         } else if ("subscriber".equalsIgnoreCase(name)) {

            String suName = attrs.getValue(SU_NAME);
            if (suName == null)
               throw new SAXException("Missing a required attribute " + SU_NAME);

            SuConfig suConfig = topologyConfig.getSuConfigByName(suName);
            if (suConfig == null) {
               //throw new SAXException("Could not find an rfss for " + suName);
               logger.debug("SKIP-Could not find SUConfig for subscriber " + suName);
            }
            this.currentGroupConfig.addSubscriber(suConfig);
            suConfig.addGroup(this.currentGroupConfig);
            suConfig.addSubscribedTo(this.currentGroupConfig);
         }
      } catch (SAXException ex1) {
         throw ex1;
      } catch (Exception ex) {
         logger.error("Error parsing configuration file " + configFile, ex);
         throw new SAXException("Error parsing config file", ex);
      }
   }

   @Override
   public void endElement(String uri, String name, String qName)
      throws SAXException {
      if ("suconfig".equalsIgnoreCase(qName)) {
         setCurrentSuConfig(null);
      } else if ("sgconfig".equalsIgnoreCase(qName)) {
         setCurrentGroupConfig(null);
      }
   }
}
